/*
 * Rosetta
 *
 * A standard for blockchain interaction
 *
 * API version: 1.2.3
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"context"

	"github.com/celo-org/rosetta/celo"
	"github.com/celo-org/rosetta/celo/client"
	"github.com/celo-org/rosetta/celo/wrapper"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
)

// AccountApiService is a service that implents the logic for the AccountApiServicer
// This service should implement the business logic for every endpoint for the AccountApi API.
// Include any external packages or services that will be required by this service.
type AccountApiService struct {
	celoClient  *client.CeloClient
	chainParams *celo.ChainParameters
}

// NewAccountApiService creates a default api service
func NewAccountApiService(celoClient *client.CeloClient, chainParams *celo.ChainParameters) AccountApiServicer {
	return &AccountApiService{
		celoClient:  celoClient,
		chainParams: chainParams,
	}
}

const (
	LockedGoldNonVoting         = "LockedGoldNonVoting"
	LockedGoldPendingWithdrawal = "LockedGoldPendingWithdrawal"
	LockedGoldVotingPending     = "LockedGoldVotingPending"
	LockedGoldVotingActive      = "LockedGoldVotingActive"
)

// AccountBalance - Get an Account Balance
func (s *AccountApiService) AccountBalance(ctx context.Context, accountBalanceRequest AccountBalanceRequest) (interface{}, error) {

	err := ValidateNetworkId(&accountBalanceRequest.NetworkIdentifier, s.chainParams)
	if err != nil {
		return nil, err
	}

	accountAddr := common.HexToAddress(accountBalanceRequest.AccountIdentifier.Address)

	latestHeader, err := s.celoClient.Eth.HeaderByNumber(ctx, nil) // nil == latest
	if err != nil {
		return nil, err
	}
	latestBlockOpts := &bind.CallOpts{
		BlockNumber: latestHeader.Number,
		Context:     ctx,
	}

	// available rosetta balances at latest block
	var balances []Balance

	goldAmt, err := s.celoClient.Eth.BalanceAt(ctx, accountAddr, latestHeader.Number)
	if err != nil {
		return nil, err
	}

	goldBalance := NewCeloGoldBalance(accountAddr, goldAmt, nil)
	balances = append(balances, *goldBalance)

	registryWrapper, err := wrapper.NewRegistry(s.celoClient)
	if err == client.ErrContractNotDeployed {
		// Nothing is deployed => ignore lockedGold & election balances
		return &AccountBalanceResponse{
			BlockIdentifier: *HeaderToBlockIdentifier(latestHeader),
			Balances:        balances,
		}, nil
	} else if err != nil {
		return nil, err
	}

	// Fetch LockedGold Balances
	lockedGoldWrapper, err := wrapper.NewLockedGold(s.celoClient, registryWrapper)
	if err == nil {
		nonVotingLockedGold, err := lockedGoldWrapper.GetAccountNonvotingLockedGold(latestBlockOpts, accountAddr)
		if err != nil {
			return nil, err
		}

		lockedGoldBalance := NewCeloGoldBalance(accountAddr, nonVotingLockedGold, NewSubAccountIdentifier(LockedGoldNonVoting, "", ""))
		balances = append(balances, *lockedGoldBalance)

		pendingWithdrawals, err := lockedGoldWrapper.GetPendingWithdrawals(latestBlockOpts, accountAddr)
		if err != nil {
			return nil, err
		}
		for _, withdrawal := range pendingWithdrawals {
			pendingWithdrawalSubAccount := NewSubAccountIdentifier(LockedGoldPendingWithdrawal, "timestamp", withdrawal.Timestamp.String())
			pendingWithdrawalBalanace := NewCeloGoldBalance(accountAddr, withdrawal.Amount, pendingWithdrawalSubAccount)
			balances = append(balances, *pendingWithdrawalBalanace)
		}
	} else if err != client.ErrContractNotDeployed {
		return nil, err
	}

	// Fetch Election (Votes) Balances
	electionWrapper, err := wrapper.NewElection(s.celoClient, registryWrapper)
	if err == nil {
		electionVotes, err := electionWrapper.GetAccountElectionVotes(latestBlockOpts, accountAddr)
		if err != nil {
			return nil, err
		}

		for groupAddr, activeAmt := range electionVotes.Active {
			activeGroupSubAccount := NewSubAccountIdentifier(LockedGoldVotingActive, "group", groupAddr.String())
			activeVotesForGroupBalance := NewCeloGoldBalance(accountAddr, activeAmt, activeGroupSubAccount)
			balances = append(balances, *activeVotesForGroupBalance)
		}

		for groupAddr, pendingAmt := range electionVotes.Pending {
			pendingGroupSubAccount := NewSubAccountIdentifier(LockedGoldVotingPending, "group", groupAddr.String())
			pendingVotesForGroupbalance := NewCeloGoldBalance(accountAddr, pendingAmt, pendingGroupSubAccount)
			balances = append(balances, *pendingVotesForGroupbalance)
		}
	} else if err != client.ErrContractNotDeployed {
		return nil, err
	}

	// return balance response
	response := AccountBalanceResponse{
		BlockIdentifier: *HeaderToBlockIdentifier(latestHeader),
		Balances:        balances,
	}
	return response, nil
}
